

Başarılı sorunçlar için veri sayısı, epoch, batch_size değerleri değiştirilmelidir.
In [ ]:
# from google.colab import drive
# drive.mount('/content/drive')
Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).

In [ ]:
import numpy
import random as r
import glob
import skimage.io as io
import matplotlib.pyplot as plt
import keras

In [ ]:
pip install simpleitk
Collecting simpleitk
  Downloading https://files.pythonhosted.org/packages/cc/85/6a7ce61f07cdaca722dd64f028b5678fb0a9e1bf66f534c2f8dd2eb78490/SimpleITK-2.0.2-cp36-cp36m-manylinux2010_x86_64.whl (47.4MB)
     |████████████████████████████████| 47.4MB 64kB/s 
Installing collected packages: simpleitk
Successfully installed simpleitk-2.0.2

In [ ]:
!unzip /content/drive/MyDrive/Örnek_veri.zip
#!unzip /content/Örnek_veri.zip
Archive:  /content/drive/MyDrive/Örnek_veri.zip
   creating: data_training/
   creating: data_training/HGG/
   creating: data_training/HGG/BraTS19_2013_18_1/
  inflating: data_training/HGG/BraTS19_2013_18_1/BraTS19_2013_18_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_18_1/BraTS19_2013_18_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_18_1/BraTS19_2013_18_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_18_1/BraTS19_2013_18_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_18_1/BraTS19_2013_18_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_19_1/
  inflating: data_training/HGG/BraTS19_2013_19_1/BraTS19_2013_19_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_19_1/BraTS19_2013_19_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_19_1/BraTS19_2013_19_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_19_1/BraTS19_2013_19_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_19_1/BraTS19_2013_19_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_20_1/
  inflating: data_training/HGG/BraTS19_2013_20_1/BraTS19_2013_20_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_20_1/BraTS19_2013_20_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_20_1/BraTS19_2013_20_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_20_1/BraTS19_2013_20_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_20_1/BraTS19_2013_20_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_21_1/
  inflating: data_training/HGG/BraTS19_2013_21_1/BraTS19_2013_21_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_21_1/BraTS19_2013_21_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_21_1/BraTS19_2013_21_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_21_1/BraTS19_2013_21_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_21_1/BraTS19_2013_21_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_22_1/
  inflating: data_training/HGG/BraTS19_2013_22_1/BraTS19_2013_22_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_22_1/BraTS19_2013_22_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_22_1/BraTS19_2013_22_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_22_1/BraTS19_2013_22_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_22_1/BraTS19_2013_22_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_23_1/
  inflating: data_training/HGG/BraTS19_2013_23_1/BraTS19_2013_23_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_23_1/BraTS19_2013_23_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_23_1/BraTS19_2013_23_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_23_1/BraTS19_2013_23_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_23_1/BraTS19_2013_23_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_25_1/
  inflating: data_training/HGG/BraTS19_2013_25_1/BraTS19_2013_25_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_25_1/BraTS19_2013_25_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_25_1/BraTS19_2013_25_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_25_1/BraTS19_2013_25_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_25_1/BraTS19_2013_25_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_26_1/
  inflating: data_training/HGG/BraTS19_2013_26_1/BraTS19_2013_26_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_26_1/BraTS19_2013_26_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_26_1/BraTS19_2013_26_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_26_1/BraTS19_2013_26_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_26_1/BraTS19_2013_26_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_2013_27_1/
  inflating: data_training/HGG/BraTS19_2013_27_1/BraTS19_2013_27_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_27_1/BraTS19_2013_27_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_27_1/BraTS19_2013_27_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_27_1/BraTS19_2013_27_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_2013_27_1/BraTS19_2013_27_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AAB_1/
  inflating: data_training/HGG/BraTS19_CBICA_AAB_1/BraTS19_CBICA_AAB_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAB_1/BraTS19_CBICA_AAB_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAB_1/BraTS19_CBICA_AAB_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAB_1/BraTS19_CBICA_AAB_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAB_1/BraTS19_CBICA_AAB_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AAG_1/
  inflating: data_training/HGG/BraTS19_CBICA_AAG_1/BraTS19_CBICA_AAG_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAG_1/BraTS19_CBICA_AAG_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAG_1/BraTS19_CBICA_AAG_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAG_1/BraTS19_CBICA_AAG_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAG_1/BraTS19_CBICA_AAG_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AAL_1/
  inflating: data_training/HGG/BraTS19_CBICA_AAL_1/BraTS19_CBICA_AAL_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAL_1/BraTS19_CBICA_AAL_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAL_1/BraTS19_CBICA_AAL_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAL_1/BraTS19_CBICA_AAL_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAL_1/BraTS19_CBICA_AAL_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AAP_1/
  inflating: data_training/HGG/BraTS19_CBICA_AAP_1/BraTS19_CBICA_AAP_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAP_1/BraTS19_CBICA_AAP_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAP_1/BraTS19_CBICA_AAP_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAP_1/BraTS19_CBICA_AAP_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AAP_1/BraTS19_CBICA_AAP_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABB_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABB_1/BraTS19_CBICA_ABB_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABB_1/BraTS19_CBICA_ABB_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABB_1/BraTS19_CBICA_ABB_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABB_1/BraTS19_CBICA_ABB_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABB_1/BraTS19_CBICA_ABB_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABE_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABE_1/BraTS19_CBICA_ABE_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABE_1/BraTS19_CBICA_ABE_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABE_1/BraTS19_CBICA_ABE_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABE_1/BraTS19_CBICA_ABE_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABE_1/BraTS19_CBICA_ABE_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABM_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABM_1/BraTS19_CBICA_ABM_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABM_1/BraTS19_CBICA_ABM_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABM_1/BraTS19_CBICA_ABM_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABM_1/BraTS19_CBICA_ABM_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABM_1/BraTS19_CBICA_ABM_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABN_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABN_1/BraTS19_CBICA_ABN_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABN_1/BraTS19_CBICA_ABN_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABN_1/BraTS19_CBICA_ABN_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABN_1/BraTS19_CBICA_ABN_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABN_1/BraTS19_CBICA_ABN_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABO_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABO_1/BraTS19_CBICA_ABO_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABO_1/BraTS19_CBICA_ABO_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABO_1/BraTS19_CBICA_ABO_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABO_1/BraTS19_CBICA_ABO_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABO_1/BraTS19_CBICA_ABO_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ABY_1/
  inflating: data_training/HGG/BraTS19_CBICA_ABY_1/BraTS19_CBICA_ABY_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABY_1/BraTS19_CBICA_ABY_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABY_1/BraTS19_CBICA_ABY_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABY_1/BraTS19_CBICA_ABY_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ABY_1/BraTS19_CBICA_ABY_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ALN_1/
  inflating: data_training/HGG/BraTS19_CBICA_ALN_1/BraTS19_CBICA_ALN_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALN_1/BraTS19_CBICA_ALN_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALN_1/BraTS19_CBICA_ALN_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALN_1/BraTS19_CBICA_ALN_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALN_1/BraTS19_CBICA_ALN_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ALU_1/
  inflating: data_training/HGG/BraTS19_CBICA_ALU_1/BraTS19_CBICA_ALU_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALU_1/BraTS19_CBICA_ALU_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALU_1/BraTS19_CBICA_ALU_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALU_1/BraTS19_CBICA_ALU_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALU_1/BraTS19_CBICA_ALU_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ALX_1/
  inflating: data_training/HGG/BraTS19_CBICA_ALX_1/BraTS19_CBICA_ALX_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALX_1/BraTS19_CBICA_ALX_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALX_1/BraTS19_CBICA_ALX_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALX_1/BraTS19_CBICA_ALX_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ALX_1/BraTS19_CBICA_ALX_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AME_1/
  inflating: data_training/HGG/BraTS19_CBICA_AME_1/BraTS19_CBICA_AME_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AME_1/BraTS19_CBICA_AME_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AME_1/BraTS19_CBICA_AME_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AME_1/BraTS19_CBICA_AME_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AME_1/BraTS19_CBICA_AME_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AMH_1/
  inflating: data_training/HGG/BraTS19_CBICA_AMH_1/BraTS19_CBICA_AMH_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AMH_1/BraTS19_CBICA_AMH_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AMH_1/BraTS19_CBICA_AMH_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AMH_1/BraTS19_CBICA_AMH_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AMH_1/BraTS19_CBICA_AMH_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ANG_1/
  inflating: data_training/HGG/BraTS19_CBICA_ANG_1/BraTS19_CBICA_ANG_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANG_1/BraTS19_CBICA_ANG_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANG_1/BraTS19_CBICA_ANG_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANG_1/BraTS19_CBICA_ANG_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANG_1/BraTS19_CBICA_ANG_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ANI_1/
  inflating: data_training/HGG/BraTS19_CBICA_ANI_1/BraTS19_CBICA_ANI_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANI_1/BraTS19_CBICA_ANI_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANI_1/BraTS19_CBICA_ANI_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANI_1/BraTS19_CBICA_ANI_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANI_1/BraTS19_CBICA_ANI_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ANP_1/
  inflating: data_training/HGG/BraTS19_CBICA_ANP_1/BraTS19_CBICA_ANP_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANP_1/BraTS19_CBICA_ANP_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANP_1/BraTS19_CBICA_ANP_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANP_1/BraTS19_CBICA_ANP_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANP_1/BraTS19_CBICA_ANP_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ANV_1/
  inflating: data_training/HGG/BraTS19_CBICA_ANV_1/BraTS19_CBICA_ANV_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANV_1/BraTS19_CBICA_ANV_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANV_1/BraTS19_CBICA_ANV_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANV_1/BraTS19_CBICA_ANV_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANV_1/BraTS19_CBICA_ANV_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_ANZ_1/
  inflating: data_training/HGG/BraTS19_CBICA_ANZ_1/BraTS19_CBICA_ANZ_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANZ_1/BraTS19_CBICA_ANZ_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANZ_1/BraTS19_CBICA_ANZ_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANZ_1/BraTS19_CBICA_ANZ_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_ANZ_1/BraTS19_CBICA_ANZ_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOC_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOC_1/BraTS19_CBICA_AOC_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOC_1/BraTS19_CBICA_AOC_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOC_1/BraTS19_CBICA_AOC_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOC_1/BraTS19_CBICA_AOC_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOC_1/BraTS19_CBICA_AOC_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOD_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOD_1/BraTS19_CBICA_AOD_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOD_1/BraTS19_CBICA_AOD_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOD_1/BraTS19_CBICA_AOD_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOD_1/BraTS19_CBICA_AOD_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOD_1/BraTS19_CBICA_AOD_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOH_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOH_1/BraTS19_CBICA_AOH_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOH_1/BraTS19_CBICA_AOH_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOH_1/BraTS19_CBICA_AOH_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOH_1/BraTS19_CBICA_AOH_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOH_1/BraTS19_CBICA_AOH_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOO_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOO_1/BraTS19_CBICA_AOO_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOO_1/BraTS19_CBICA_AOO_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOO_1/BraTS19_CBICA_AOO_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOO_1/BraTS19_CBICA_AOO_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOO_1/BraTS19_CBICA_AOO_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOP_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOP_1/BraTS19_CBICA_AOP_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOP_1/BraTS19_CBICA_AOP_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOP_1/BraTS19_CBICA_AOP_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOP_1/BraTS19_CBICA_AOP_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOP_1/BraTS19_CBICA_AOP_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOS_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOS_1/BraTS19_CBICA_AOS_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOS_1/BraTS19_CBICA_AOS_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOS_1/BraTS19_CBICA_AOS_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOS_1/BraTS19_CBICA_AOS_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOS_1/BraTS19_CBICA_AOS_1_t2.nii.gz  
   creating: data_training/HGG/BraTS19_CBICA_AOZ_1/
  inflating: data_training/HGG/BraTS19_CBICA_AOZ_1/BraTS19_CBICA_AOZ_1_flair.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOZ_1/BraTS19_CBICA_AOZ_1_seg.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOZ_1/BraTS19_CBICA_AOZ_1_t1.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOZ_1/BraTS19_CBICA_AOZ_1_t1ce.nii.gz  
  inflating: data_training/HGG/BraTS19_CBICA_AOZ_1/BraTS19_CBICA_AOZ_1_t2.nii.gz  

In [ ]:
yol = '/content/data_training/HGG/'

In [ ]:
import os
os.listdir(yol)

Out[ ]:
['BraTS19_2013_26_1',
 'BraTS19_CBICA_ABE_1',
 'BraTS19_CBICA_ALN_1',
 'BraTS19_CBICA_ANZ_1',
 'BraTS19_CBICA_ABB_1',
 'BraTS19_CBICA_AOO_1',
 'BraTS19_CBICA_ABM_1',
 'BraTS19_CBICA_AOD_1',
 'BraTS19_CBICA_ANV_1',
 'BraTS19_CBICA_ABN_1',
 'BraTS19_CBICA_ABY_1',
 'BraTS19_CBICA_AOC_1',
 'BraTS19_CBICA_AOH_1',
 'BraTS19_CBICA_AAB_1',
 'BraTS19_CBICA_AMH_1',
 'BraTS19_CBICA_ALX_1',
 'BraTS19_2013_19_1',
 'BraTS19_CBICA_ALU_1',
 'BraTS19_CBICA_AOP_1',
 'BraTS19_2013_25_1',
 'BraTS19_CBICA_ANG_1',
 'BraTS19_2013_18_1',
 'BraTS19_CBICA_AOZ_1',
 'BraTS19_CBICA_ANI_1',
 'BraTS19_CBICA_AAG_1',
 'BraTS19_CBICA_AAL_1',
 'BraTS19_CBICA_ANP_1',
 'BraTS19_2013_20_1',
 'BraTS19_2013_23_1',
 'BraTS19_2013_27_1',
 'BraTS19_CBICA_AME_1',
 'BraTS19_2013_22_1',
 'BraTS19_CBICA_ABO_1',
 'BraTS19_2013_21_1',
 'BraTS19_CBICA_AOS_1',
 'BraTS19_CBICA_AAP_1']

In [ ]:
len(os.listdir(yol))

Out[ ]:
36

In [ ]:
import skimage.io as io
import matplotlib.pyplot as plt
import numpy as np
import random as r

def seg_array(path,end,label):
    files = glob.glob(path+end,recursive=True)
    img_liste = []
    r.seed(9)
    r.shuffle(files)
    for file in files:
        img = io.imread(file,plugin='simpleitk')
        
        if label == 1:
            img[img != 0 ] = 1 # tam tümör
        if label == 2:
            img[img != 1 ] = 0 # nekroz
        if label == 3:
            img[img == 2 ] = 0 # ödemsiz tümör
            img[img != 0 ] = 1
        if label == 4:
            img[img != 4 ] = 0 # genişleyen tümör
            img[img == 4 ] = 1
         
        img.astype('float32')
        
        for slice in range(60,130):
            img_s = img[slice,:,:]
            img_s = np.expand_dims(img_s,axis=0)
            img_liste.append(img_s)
            
    return np.array(img_liste,np.float32) #!!!!!!!!


def train_array(path,end):
    files = glob.glob(path+end,recursive=True)
    img_liste = []
    r.seed(9)
    r.shuffle(files)
    for file in files:
        img = io.imread(file,plugin='simpleitk')
        img = (img-img.mean())/ img.std()
        img.astype('float32')
        
        for slice in range(60,130):
            img_s = img[slice,:,:]
            img_s = np.expand_dims(img_s,axis=0)
            img_liste.append(img_s)
            
    return np.array(img_liste,np.float32) #!!!!!!!!

MODELİ OLUŞTURMA VE EĞİTME
flair=train_array(yol,'**/*flair.nii.gz')
t2=train_array(yol,'**/*t2.nii.gz')
seg = seg_array(yol,'**/*seg.nii.gz',1)
seg_orj = seg_array(yol,'**/*seg.nii.gz',1)

In [ ]:
flair.shape, seg.shape, t2.shape

Out[ ]:
((2520, 1, 240, 240), (2520, 1, 240, 240), (2520, 1, 240, 240))

In [ ]:
flair.dtype, seg.dtype, t2.dtype

Out[ ]:
(dtype('float32'), dtype('float32'), dtype('float32'))

In [ ]:
x_train = np.concatenate((flair,t2),axis=1)
x_train.dtype, x_train.shape

Out[ ]:
(dtype('float32'), (2520, 2, 240, 240))




In [ ]:
from keras.models import Model
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import concatenate, Conv2D, MaxPooling2D, Conv2DTranspose
from keras.layers import Input, merge, UpSampling2D,BatchNormalization
from keras.callbacks import ModelCheckpoint
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K
import tensorflow as tf

K.set_image_data_format('channels_first')


def dice_coef(y_true, y_pred):
    smooth = 0.005 
    y_true_f = K.flatten(y_true)
    y_pred_f = K.flatten(y_pred)
    intersection = K.sum(y_true_f * y_pred_f)
    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)


def dice_coef_loss(y_true, y_pred):
    return 1-dice_coef(y_true, y_pred)
    
def unet_model():
    
    inputs = Input((2, 240 , 240))
    
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (inputs)
    batch1 = BatchNormalization(axis=1)(conv1)
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch1)
    batch1 = BatchNormalization(axis=1)(conv1)
    pool1 = MaxPooling2D((2, 2)) (batch1)
    
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (pool1)
    batch2 = BatchNormalization(axis=1)(conv2)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch2)
    batch2 = BatchNormalization(axis=1)(conv2)
    pool2 = MaxPooling2D((2, 2)) (batch2)
    
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (pool2)
    batch3 = BatchNormalization(axis=1)(conv3)
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch3)
    batch3 = BatchNormalization(axis=1)(conv3)
    pool3 = MaxPooling2D((2, 2)) (batch3)
    
    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same') (pool3)
    batch4 = BatchNormalization(axis=1)(conv4)
    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch4)
    batch4 = BatchNormalization(axis=1)(conv4)
    pool4 = MaxPooling2D(pool_size=(2, 2)) (batch4)
    
    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (pool4)
    batch5 = BatchNormalization(axis=1)(conv5)
    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same') (batch5)
    batch5 = BatchNormalization(axis=1)(conv5)
    
    up6 = Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same') (batch5)
    up6 = concatenate([up6, conv4], axis=1)
    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same') (up6)
    batch6 = BatchNormalization(axis=1)(conv6)
    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch6)
    batch6 = BatchNormalization(axis=1)(conv6)
    
    up7 = Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same') (batch6)
    up7 = concatenate([up7, conv3], axis=1)
    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (up7)
    batch7 = BatchNormalization(axis=1)(conv7)
    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch7)
    batch7 = BatchNormalization(axis=1)(conv7)
    
    up8 = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same') (batch7)
    up8 = concatenate([up8, conv2], axis=1)
    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (up8)
    batch8 = BatchNormalization(axis=1)(conv8)
    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch8)
    batch8 = BatchNormalization(axis=1)(conv8)
    
    up9 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (batch8)
    up9 = concatenate([up9, conv1], axis=1)
    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (up9)
    batch9 = BatchNormalization(axis=1)(conv9)
    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch9)
    batch9 = BatchNormalization(axis=1)(conv9)

    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(batch9)

    model = Model(inputs=[inputs], outputs=[conv10]) 

    model.compile(optimizer=Adam(lr=1e-4), loss=dice_coef_loss, metrics=[dice_coef])

    return model               

model = unet_model()

In [ ]:
model.fit(x_train,seg,validation_split=0.20,batch_size=10,epochs=1,shuffle=True,verbose=1)
202/202 [==============================] - 119s 528ms/step - loss: 0.8578 - dice_coef: 0.1422 - val_loss: 0.9034 - val_dice_coef: 0.0954

Out[ ]:
<tensorflow.python.keras.callbacks.History at 0x7f34401f18d0>

In [ ]:
seg_geniş   = seg_array(yol,'**/*seg.nii.gz',4)
seg_ödemsiz = seg_array(yol,'**/*seg.nii.gz',3)

In [ ]:
t1ce = train_array(yol,'**/*t1ce.nii.gz')

In [ ]:
seg_geniş.shape, seg_ödemsiz.shape, t1ce.shape

Out[ ]:
((2520, 1, 240, 240), (2520, 1, 240, 240), (2520, 1, 240, 240))

In [ ]:
plt.figure(figsize=(15,10))

plt.subplot(3,4,1)
plt.title('T1ce')
plt.imshow(t1ce[425,0,:,:])

plt.subplot(3,4,2)
plt.title('geniş')
plt.imshow(seg_geniş[425,0,:,:])

plt.subplot(3,4,3)
plt.title('ödemsiz')
plt.imshow(seg_ödemsiz[425,0,:,:])



Out[ ]:
<matplotlib.image.AxesImage at 0x7f33eaeadbe0> 
 

In [ ]:
def tümör_kırpma(mr,seg):
    
    mr = mr[0]
    liste = []
    tmp = seg[0,:,:]
    tmp[tmp>0.2] = 1
    tmp[tmp!= 1] = 0
    index_xy = np.where(tmp==1)
    
    if index_xy[0] != []:
        merkez_y = (max(index_xy[0]) + (min(index_xy[0])) ) / 2
        merkez_x = (max(index_xy[1]) + (min(index_xy[1])) ) / 2
        img_x =  np.zeros((64,64), np.float32)
        img_x[:,:] = mr[int(merkez_y - 64/2):int(merkez_y + 64/2),int(merk                       z_x - 64/2):int(merkez_x + 64/2) ]
        liste.append(img_x)
        
    return np.array(liste)

def tumortoarray(tumor,segmentasyon):
    
    liste_boş= []

    for i in range(len(segmentasyon)):
        img = tümör_kırpma(tumor[i],segmentasyon[i])
        if len(img.shape) > 2:
            liste_boş.append(img)
            print(f'{i}')

    return np.array(liste_boş)

ödemsiz = tumortoarray(seg_ödemsiz,seg_ödemsiz)
geniş = tumortoarray(seg_geniş,seg_ödemsiz)
t1ce_kırp = tumortoarray(t1ce,seg_ödemsiz)
/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.
  # Remove the CWD from sys.path while we load stuff.
/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.
  # Remove the CWD from sys.path while we load stuff.
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1540
1541
1542
1543
1544
1545
1546
1547
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1540
1541
1542
1543
1544
1545
1546
1547
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1540
1541
1542
1543
1544
1545
1546
1547
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463







In [ ]:
t1ce_kırp.shape, ödemsiz.shape, geniş.shape

Out[ ]:
((1162, 1, 64, 64), (1162, 1, 64, 64), (1162, 1, 64, 64))

In [ ]:
plt.figure(figsize=(15,10))

plt.subplot(3,4,1)
plt.title('T1ce')
plt.imshow(t1ce_kırp[405,0,:,:])

plt.subplot(3,4,2)
plt.title('geniş')
plt.imshow(geniş[405,0,:,:])

plt.subplot(3,4,3)
plt.title('ödemsiz')
plt.imshow(ödemsiz[405,0,:,:])

Out[ ]:
<matplotlib.image.AxesImage at 0x7f33ead35940>
 

In [ ]:
def unet_model_7():
    
    inputs = Input((1, 64, 64))
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (inputs)
    batch1 = BatchNormalization(axis=1)(conv1)
    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch1)
    batch1 = BatchNormalization(axis=1)(conv1)
    pool1 = MaxPooling2D((2, 2)) (batch1)
    
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (pool1)
    batch2 = BatchNormalization(axis=1)(conv2)
    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch2)
    batch2 = BatchNormalization(axis=1)(conv2)
    pool2 = MaxPooling2D((2, 2)) (batch2)
    
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (pool2)
    batch3 = BatchNormalization(axis=1)(conv3)
    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch3)
    batch3 = BatchNormalization(axis=1)(conv3)
    pool3 = MaxPooling2D((2, 2)) (batch3)
     
    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same') (pool3)
    batch5 = BatchNormalization(axis=1)(conv5)
    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same') (batch5)
    batch5 = BatchNormalization(axis=1)(conv5)
    
    up7 = Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same') (batch5)
    up7 = concatenate([up7, conv3], axis=1)
    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (up7)
    batch7 = BatchNormalization(axis=1)(conv7)
    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same') (batch7)
    batch7 = BatchNormalization(axis=1)(conv7)
    
    up8 = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same') (batch7)
    up8 = concatenate([up8, conv2], axis=1)
    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (up8)
    batch8 = BatchNormalization(axis=1)(conv8)
    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same') (batch8)
    batch8 = BatchNormalization(axis=1)(conv8)
    
    up9 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (batch8)
    up9 = concatenate([up9, conv1], axis=1)
    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (up9)
    batch9 = BatchNormalization(axis=1)(conv9)
    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same') (batch9)
    batch9 = BatchNormalization(axis=1)(conv9)

    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(batch9)

    model = Model(inputs=[inputs], outputs=[conv10])

    model.compile(optimizer=Adam(lr=1e-4), loss=dice_coef_loss, metrics=[dice_coef])

    return model

In [ ]:
model_ödemsiz = unet_model_7()

In [ ]:
history = model_ödemsiz.fit(t1ce_kırp, ödemsiz,
                       validation_split= 0.20,   
                       batch_size = 10,  	
                       epochs= 5,
                       shuffle=True,
                       verbose=1)
Epoch 1/5
93/93 [==============================] - 7s 51ms/step - loss: 0.4668 - dice_coef: 0.5332 - val_loss: 0.7716 - val_dice_coef: 0.2225
Epoch 2/5
93/93 [==============================] - 3s 37ms/step - loss: 0.1983 - dice_coef: 0.8017 - val_loss: 0.6526 - val_dice_coef: 0.3377
Epoch 3/5
93/93 [==============================] - 3s 37ms/step - loss: 0.1483 - dice_coef: 0.8517 - val_loss: 0.3434 - val_dice_coef: 0.6539
Epoch 4/5
93/93 [==============================] - 3s 37ms/step - loss: 0.1406 - dice_coef: 0.8594 - val_loss: 0.3076 - val_dice_coef: 0.6910
Epoch 5/5
93/93 [==============================] - 3s 37ms/step - loss: 0.0879 - dice_coef: 0.9121 - val_loss: 0.3189 - val_dice_coef: 0.6668

In [ ]:
model_geniş = unet_model_7()

In [ ]:
history = model_geniş.fit(t1ce_kırp, geniş,
                       validation_split= 0.20,
                       batch_size = 10,
                       epochs= 5,
                       shuffle=True,
                       verbose=1)
Epoch 1/5
93/93 [==============================] - 5s 41ms/step - loss: 0.6033 - dice_coef: 0.3967 - val_loss: 0.7579 - val_dice_coef: 0.2359
Epoch 2/5
93/93 [==============================] - 3s 37ms/step - loss: 0.3424 - dice_coef: 0.6576 - val_loss: 0.6794 - val_dice_coef: 0.3117
Epoch 3/5
93/93 [==============================] - 3s 38ms/step - loss: 0.3120 - dice_coef: 0.6880 - val_loss: 0.4440 - val_dice_coef: 0.5400
Epoch 4/5
93/93 [==============================] - 3s 37ms/step - loss: 0.2613 - dice_coef: 0.7387 - val_loss: 0.3601 - val_dice_coef: 0.6332
Epoch 5/5
93/93 [==============================] - 3s 37ms/step - loss: 0.2283 - dice_coef: 0.7717 - val_loss: 0.2184 - val_dice_coef: 0.7743

In [ ]:
model_ödemsiz.load_weights('/content/drive/MyDrive/ödemsiz.h5')
model_geniş.load_weights('/content/drive/MyDrive/geniş.h5')
#model_ödemsiz.load_weights('/content/ödemsiz.h5')
#model_geniş.load_weights('/content/geniş.h5')

In [ ]:
x = 235

plt.figure(figsize=(15,10))

plt.subplot(3,4,1)
plt.title('T1ce')
plt.imshow(t1ce_kırp[x,0,:,:])


pred_geniş = model_geniş.predict(t1ce_kırp[x:x+1,:,:,:])
plt.subplot(3,4,2)
plt.title('Genişleyen tümör tahmin')
plt.imshow(pred_geniş[0,0,:,:] )

plt.subplot(3,4,3)
plt.title('Genişleyen tümör')
plt.imshow(geniş[x,0,:,:])

pred_ödemsiz = model_ödemsiz.predict(t1ce_kırp[x:x+1,:,:,:])
plt.subplot(3,4,4)
plt.title('Genişleyen + Nekroz tahmin ')
plt.imshow(pred_ödemsiz[0,0,:,:] )


plt.subplot(3,4,5)
plt.title('Genişleyen + Nekroz')
plt.imshow(ödemsiz[x,0,:,:])







Out[ ]:
<matplotlib.image.AxesImage at 0x7f33e26986d8>
 

In [ ]:
def tümör_kırp(x, pred, size): 
    crop_x = []
    list_xy = []
    p_tmp = pred[0,:,:]
    p_tmp[p_tmp>0.2] = 1    
    p_tmp[p_tmp !=1] = 0
    index_xy = np.where(p_tmp==1)  

    if index_xy[0].shape[0] == 0: 
        return [],[]
        
    center_x = (max(index_xy[0]) + min(index_xy[0])) / 2 
    center_y = (max(index_xy[1]) + min(index_xy[1])) / 2 
    
    if center_x >= 176:                  
            center_x = center_x-8
        
    length = max(index_xy[0]) - min(index_xy[0])
    width = max(index_xy[1]) - min(index_xy[1])
        
    if width <= 64 and length <= 64:  #64x64
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size/2) : int(center_x + size/2),int(center_y - size/2) : int(center_y + size/2)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size/2),int(center_y - size/2)))
            
    if width > 64 and length <= 64:  #64x128
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size/2) : int(center_x + size/2),int(center_y - size) : int(center_y)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size/2),int(center_y - size)))
            
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size/2) : int(center_x + size/2),int(center_y + 1) : int(center_y + size + 1)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size/2),int(center_y)))
            
    if width <= 64 and length > 64:  #128x64       
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size) : int(center_x),int(center_y - size/2) : int(center_y + size/2)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size),int(center_y - size/2)))
            
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x + 1) : int(center_x + size + 1),int(center_y - size/2) : int(center_y + size/2)]
        crop_x.append(img_x)
        list_xy.append((int(center_x),int(center_y - size/2)))
            
    if width > 64 and length > 64:  #128x128
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size) : int(center_x),int(center_y - size) : int(center_y)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size),int(center_y - size)))
            
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x + 1) : int(center_x + size + 1),int(center_y - size) : int(center_y)]
        crop_x.append(img_x)
        list_xy.append((int(center_x),int(center_y - size)))
            
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x - size) : int(center_x),int(center_y + 1) : int(center_y + size + 1)]
        crop_x.append(img_x)
        list_xy.append((int(center_x - size),int(center_y)))
            
        img_x = np.zeros((1,size,size),np.float32)
        img_x[:,:,:] = x[:,int(center_x + 1) : int(center_x + size + 1),int(center_y + 1) : int(center_y + size + 1)]
        crop_x.append(img_x)
        list_xy.append((int(center_x),int(center_y)))
        
    
        
    return np.array(crop_x) , list_xy


 



In [ ]:
sayı = 210

görüntü1, kordinat1 = tümör_kırp(t1ce[sayı,:,:,:],seg[sayı,:,:,:],64)
görüntü2, kordinat2 = tümör_kırp(seg_geniş[sayı,:,:,:],seg[sayı,:,:,:],64)
görüntü3, kordinat3 = tümör_kırp(seg_ödemsiz[sayı,:,:,:],seg[sayı,:,:,:],64)



In [ ]:
görüntü1.shape, görüntü2.shape, görüntü3.shape



Out[ ]:
((4, 1, 64, 64), (4, 1, 64, 64), (4, 1, 64, 64))


In [ ]:
plt.figure(figsize=(15,10))

plt.subplot(3,4,1)
plt.title('t1ce')
plt.imshow(t1ce[sayı,0,:,:])

plt.subplot(3,4,2)
plt.title('t1ce kırpılmış (1. kırpma)')
plt.imshow(görüntü1[0,0,:,:])

plt.subplot(3,4,3)
plt.title('genişleyen tümör')
plt.imshow(görüntü2[0,0,:,:])

plt.subplot(3,4,4)
plt.title('genişleyen tümör')
plt.imshow(görüntü2[1,0,:,:])

plt.subplot(3,4,5)
plt.title('genişleyen tümör')
plt.imshow(görüntü2[2,0,:,:])

plt.subplot(3,4,6)
plt.title('genişleyen tümör')
plt.imshow(görüntü2[3,0,:,:])

plt.subplot(3,4,7)
plt.title('genişleyen + nekroz')
plt.imshow(görüntü3[0,0,:,:])
















Out[ ]:
<matplotlib.image.AxesImage at 0x7f33e24b5da0>
 

In [ ]:
def tumor2array(tumor,segmentasyon):

    liste = []

    for i in range(len(tumor)):
        crop , kordinat = tümör_kırp(tumor[i,:,:,:],segmentasyon[i,:,:,:],64)
    
        if crop == []:
            pass
        elif crop.shape[0] ==1:
            liste.append(crop[0])
        
        elif crop.shape[0] ==2:
        
           liste.append(crop[0])
           liste.append(crop[1])
        
        elif crop.shape[0] ==4:
        
            liste.append(crop[0])
            liste.append(crop[1])
            liste.append(crop[2])
            liste.append(crop[3]) 
    
    return np.array(liste)



In [ ]:
t1ce_array = tumor2array(t1ce,seg)
geniş_array = tumor2array(seg_geniş,seg)
ödemsiz_array = tumor2array(seg_ödemsiz,seg)
t1ce_array.shape, ödemsiz_array.shape, geniş_array.shape
/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.
  

Out[ ]:
((2973, 1, 64, 64), (2973, 1, 64, 64), (2973, 1, 64, 64))

In [ ]:
plt.figure(figsize=(15,10))

plt.subplot(3,4,1)
plt.title('t1ce')
plt.imshow(t1ce_array[90,0,:,:])

plt.subplot(3,4,2)
plt.title('geniş')
plt.imshow(geniş_array[90,0,:,:])

plt.subplot(3,4,3)
plt.title('ödemsiz')
plt.imshow(ödemsiz_array[90,0,:,:])

Out[ ]:
<matplotlib.image.AxesImage at 0x7f33e2338710>
 



In [ ]:
model_ödemsiz_2 = unet_model_7()

In [ ]:
history = model_ödemsiz_2.fit(t1ce_array, ödemsiz_array,
                       validation_split= 0.20,
                       batch_size = 10,
                       epochs= 5,
                       shuffle=True,
                       verbose=1)
Epoch 1/5
238/238 [==============================] - 11s 41ms/step - loss: 0.6418 - dice_coef: 0.3582 - val_loss: 0.7614 - val_dice_coef: 0.2366
Epoch 2/5
238/238 [==============================] - 9s 36ms/step - loss: 0.3577 - dice_coef: 0.6423 - val_loss: 0.5925 - val_dice_coef: 0.4041
Epoch 3/5
238/238 [==============================] - 9s 36ms/step - loss: 0.2351 - dice_coef: 0.7649 - val_loss: 0.5621 - val_dice_coef: 0.4342
Epoch 4/5
238/238 [==============================] - 9s 37ms/step - loss: 0.1843 - dice_coef: 0.8157 - val_loss: 0.5415 - val_dice_coef: 0.4547
Epoch 5/5
238/238 [==============================] - 9s 37ms/step - loss: 0.1274 - dice_coef: 0.8726 - val_loss: 0.5189 - val_dice_coef: 0.4771

In [ ]:
model_geniş_2 = unet_model_7()

In [ ]:
history = model_geniş_2.fit(t1ce_array, geniş_array,
                       validation_split= 0.20,
                       batch_size = 10,
                       epochs= 5,
                       shuffle=True,
                       verbose=1)
Epoch 1/5
238/238 [==============================] - 11s 38ms/step - loss: 0.7617 - dice_coef: 0.2383 - val_loss: 0.7843 - val_dice_coef: 0.2139
Epoch 2/5
238/238 [==============================] - 9s 37ms/step - loss: 0.5475 - dice_coef: 0.4525 - val_loss: 0.5444 - val_dice_coef: 0.4518
Epoch 3/5
238/238 [==============================] - 9s 37ms/step - loss: 0.4353 - dice_coef: 0.5647 - val_loss: 0.4494 - val_dice_coef: 0.5460
Epoch 4/5
238/238 [==============================] - 9s 37ms/step - loss: 0.3477 - dice_coef: 0.6523 - val_loss: 0.5243 - val_dice_coef: 0.4718
Epoch 5/5
238/238 [==============================] - 9s 38ms/step - loss: 0.2797 - dice_coef: 0.7203 - val_loss: 0.4323 - val_dice_coef: 0.5630

In [ ]:
model_ödemsiz_2.load_weights('/content/drive/MyDrive/ödemsiz.h5')
model_geniş_2.load_weights('/content/drive/MyDrive/geniş.h5')
model.load_weights('/content/drive/MyDrive/tam.h5')
# model_ödemsiz_2.load_weights('/content/ödemsiz.h5')
# model_geniş_2.load_weights('/content/geniş.h5')
# model.load_weights('/content/tam.h5')

In [ ]:
görüntü , koordinat = tümör_kırp(t1ce[1020,:,:,:],seg[1020,:,:,:],64)

In [ ]:
görüntü.shape

Out[ ]:
(4, 1, 64, 64)

In [ ]:
pred_ödemsiz = model_ödemsiz.predict(görüntü)
pred_geniş = model_geniş.predict(görüntü)
pred_tam = model.predict(x_train[1020:1021,:,:,:])

In [ ]:
pred_tam[pred_tam > 0.2] = 2
pred_tam[pred_tam != 2 ] = 0

pred_ödemsiz[pred_ödemsiz > 0.2] = 1
pred_ödemsiz[pred_ödemsiz != 1 ] = 0

pred_geniş[pred_geniş > 0.2] = 4
pred_geniş[pred_geniş != 4 ] = 0









In [ ]:
def üstüne_ekle(pred_tam, pred_ödemsiz , pred_geniş , koordinat):  
    
    total = np.zeros((1,240,240),np.float32)  
    total[:,:,:] = pred_tam[:,:,:]
    
    for i in range(pred_ödemsiz.shape[0]):
        for j in range(64):
            for k in range(64):
                
                if pred_ödemsiz[i,0,j,k] != 0 and pred_tam[0,koordinat[i][0]+j,koordinat[i][1]+k] !=0:
                    total[0,koordinat[i][0]+j,koordinat[i][1]+k] = pred_ödemsiz[i,0,j,k]
                    
                if pred_geniş[i,0,j,k] != 0 and pred_tam[0,koordinat[i][0]+j,koordinat[i][1]+k] !=0:
                    total[0,koordinat[i][0]+j,koordinat[i][1]+k] = pred_geniş[i,0,j,k]
                
    return total

In [ ]:
deneme = üstüne_ekle(pred_tam[0,:,:,:], pred_ödemsiz, pred_geniş, koordinat)

In [ ]:
deneme.shape

Out[ ]:
(1, 240, 240)

Tahmin (Prediction)

In [ ]:
plt.imshow(deneme[0])










Out[ ]:
<matplotlib.image.AxesImage at 0x7f314e6877b8>
 

In [ ]:
plt.imshow(t1ce[1020,0,:,:])

Out[ ]:
<matplotlib.image.AxesImage at 0x7f314e6b7be0>
 

In [ ]:
plt.imshow(seg_geniş[1020,0,:,:])

Out[ ]:
<matplotlib.image.AxesImage at 0x7f314e5e17b8>
 

In [ ]:
plt.imshow(seg_ödemsiz[1020,0,:,:])

Out[ ]:
<matplotlib.image.AxesImage at 0x7f314e5afbe0>
 

